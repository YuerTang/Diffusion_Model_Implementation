# -*- coding: utf-8 -*-
"""GPT_Implementation.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1G62Zn-q-PF1mf8SDhToy3D8PNPi6pNBw

# Simpliest Possible Model

Companion notebook to the [Zero To Hero](https://karpathy.ai/zero-to-hero.html) video on GPT.
"""

# We always start with a dataset to train on. Let's download the tiny shakespeare dataset
!wget https://raw.githubusercontent.com/karpathy/char-rnn/master/data/tinyshakespeare/input.txt

# read it in to inspect it
with open('input.txt', 'r', encoding='utf-8') as f:
    text = f.read()


"""## Tokenization"""

# create a mapping from characters to integers
chars = sorted(list(set(text)))
vocab_size = len(chars)
stoi = { ch:i for i,ch in enumerate(chars) }
itos = { i:ch for i,ch in enumerate(chars) }
encode = lambda s: [stoi[c] for c in s] # encoder: take a string, output a list of integers
decode = lambda l: ''.join([itos[i] for i in l]) # decoder: take a list of integers, output a string

# let's now encode the entire text dataset and store it into a torch.Tensor
import torch # we use PyTorch: https://pytorch.org
data = torch.tensor(encode(text), dtype=torch.long)
print(data.shape, data.dtype)
print(data[:1000]) # the 1000 characters we looked at earier will to the GPT look like this

# Let's now split up the data into train and validation sets
n = int(0.9*len(data)) # first 90% will be train, rest val
train_data = data[:n]
val_data = data[n:]


block_size = 8
train_data[:block_size+1]

x = train_data[:block_size]
y = train_data[1:block_size+1]
for t in range(block_size):
    context = x[:t+1]
    target = y[t]
    print(f"when input is {context} the target: {target}")

torch.manual_seed(1337)
batch_size = 4 # how many independent sequences will we process in parallel?
block_size = 8 # what is the maximum context length for predictions?
n_embed = 32

def get_batch(split):
    # generate a small batch of data of inputs x and targets y
    data = train_data if split == 'train' else val_data
    # the reason for using rand genrate the index to create the batch is:
      # mess up the index so that the transforer can learn association from different place
    ix = torch.randint(len(data) - block_size, (batch_size,))
    x = torch.stack([data[i:i+block_size] for i in ix])
    y = torch.stack([data[i+1:i+block_size+1] for i in ix])
    return x, y

xb, yb = get_batch('train')

for b in range(batch_size): # batch dimension
    for t in range(block_size): # time dimension
        context = xb[b, :t+1]
        target = yb[b,t]
        print(f"when input is {context.tolist()} the target: {target}")


@torch.no_grad()
# This function is for averaging the loss
def estimate_loss():
  out = {}
  # setting the model to evaluation phase
  model.eval()
  for split in ['train','val']:
    losses = torch.zeros(eval_iters)
    for k in range(eval_iters):
      X,Y = get_batch(split)
      logis,loss = model(X,Y)
      losses[k] = loss.item()
    # get the averga loss
    out[split] = losses.mean()
  # setting the model back to training phase
  model.train()
  return out

"""## Defining the model!

"""

import torch
import torch.nn as nn
from torch.nn import functional as F
torch.manual_seed(1337)

class BigramLanguageModel(nn.Module):

  def __init__(self):
    super().__init__()
    self.token_embedding_table = nn.Embedding(vocab_size,n_embed)
    self.lm_head = nn.Linear(n_embed, vocab_size)

  def forward(self,idx, targets=None):
    # idex: tensor containing the token IDs for a batch of sequences [B,T]
    tok_emb = self.token_embedding_tale(idx)#(B,T,C)
    logits = self.token_embedding_table(tok_emb) #(B,T,vocab_size)
    if targets is None:
      loss = None
    else:
      B,T,C = logits.shape
      # change the shape
      logits = logits.view(B*T,C)
      targets = targets.view(B*T)
      loss = F.cross_entropy (logits, targets) # pytorch wants a T.C,
    return logits, loss

  def generate(self, idx, max_new_tokens):
    for _ in range(max_new_tokens):
      logits, loss = self(idx)
      # the last token in that concepts
      logits = logits[:, -1, :] # becomes(B,C)

      probs = F.softmax(logits, dim=-1)
      #given the probabilty, sample from the distribution
      idx_next = torch.multinomial(probs, num_samples = 1) # (B,1)
      # appened sampled index to the running sequence
      idx = torch.cat((idx, idx_next), dim = 1) # (B, T+1)
    return idx

m = BigramLanguageModel(vocab_size)
logits, loss = m(xb,yb)
print(logits.shape)
print(loss)
print(decode(m.generate(idx=torch.zeros((1,1),dtype=torch.long), max_new_tokens = 100)[0].tolist()))

"""## Train the model!

### Optimizer
"""

# create a PyTorch optimizer
optimizer = torch.optim.AdamW(m.parameters(), lr=1e-3)
# lr is the usual learning rate

"""### Training Loop"""

batch_size = 32
for steps in range(100): # increase number of steps for good results...

    # sample a batch of data
    xb, yb = get_batch('train')

    # evaluate the loss
    logits, loss = m(xb, yb)
    optimizer.zero_grad(set_to_none=True)
    loss.backward()
    optimizer.step()



print(loss.item())

print(decode(m.generate(idx = torch.zeros((1, 1), dtype=torch.long), max_new_tokens=500)[0].tolist()))

